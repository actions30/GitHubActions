name: Create Issue on Org Join

on:
  schedule:
    - cron: '*/5 * * * *'  # runs every 5 mins
  workflow_dispatch:       # allows manual run too

jobs:
  check-members:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Query Audit Log for accepted invites
        id: audit
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.Token }}  # or use a PAT with org read access
        with:
          script: |
            const org = 'actions30'; // change this
            const since = new Date(Date.now() - 5 * 60 * 1000).toISOString(); // last 5 mins

            const results = await github.request('GET /orgs/{org}/audit-log', {
              org,
              phrase: 'action:org.add_member',
              include: 'web',
              per_page: 10,
              order: 'desc'
            });

            const newJoins = results.data.filter(entry => new Date(entry.created_at) >= new Date(since));
            if (newJoins.length > 0) {
              const usernames = newJoins.map(entry => entry.actor).join(', ');
              core.setOutput('new_joins', usernames);
            } else {
              core.setOutput('new_joins', '');
            }

      - name: Create issue if new members joined
        if: steps.audit.outputs.new_joins != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Token }}
          script: |
            const newMembers = '${{ steps.audit.outputs.new_joins }}';
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `New Organization Member(s) Joined`,
              body: `The following users have accepted org invites and joined:\n\n${newMembers}`
            });
